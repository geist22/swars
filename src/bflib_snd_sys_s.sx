
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif

.text

.global EXPORT_SYMBOL(sb16_mixer_set);


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_IsSamplePlaying)	/* 0xee750 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    %edx,%edi
		cmpb   $0x0,SoundInstalled
		je     jump_ee828
		cmpb   $0x0,SoundAble
		je     jump_ee828
		cmpb   $0x0,SoundActive
		je     jump_ee828
		movswl %di,%eax
		test   %eax,%eax
		jne    jump_ee7a3
		test   %esi,%esi
		jne    jump_ee7a3
		push   %ebx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ee828
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ee7a3:
		movswl %di,%eax
		test   %eax,%eax
		jne    jump_ee7e5
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ee7c9
		jmp    jump_ee828
	jump_ee7bc:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_ee828
	jump_ee7c9:
		cmp    0xe(%ebx),%esi
		jne    jump_ee7bc
		mov    (%ebx),%ebp
		push   %ebp
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ee7bc
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ee7e5:
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ee806
		xor    %al,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ee7f9:
		mov    EXPORT_SYMBOL(end_sample_id),%ebp
		add    $0x19,%ebx
		cmp    %ebp,%ebx
		ja     jump_ee828
	jump_ee806:
		cmp    0xe(%ebx),%esi
		jne    jump_ee7f9
		cmp    0x12(%ebx),%di
		jne    jump_ee7f9
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ee7f9
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ee828:
		xor    %al,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_DangerMusicFadeTick)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ef11b
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ef11b
		cmpb   $0x0,MusicActive
		je     jump_ef11b
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ef11b
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_sequence_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_ef11b
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicFadeRelease)
		je     jump_ef06c
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%ecx
		push   %ecx
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_ef06c:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(DangerMusicVolume),%al
		cmp    $0x7f,%eax
		jne    jump_ef097
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(CurrentDangerMusicFadeDirection),%al
		cmp    $0x2,%eax
		jne    jump_ef097
		movb   $0x1,EXPORT_SYMBOL(DangerMusicFadeRelease)
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(DangerMusicFadeActive)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_ef097:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(DangerMusicVolume),%al
		test   %eax,%eax
		jne    jump_ef0bf
		mov    EXPORT_SYMBOL(CurrentDangerMusicFadeDirection),%al
		cmp    $0x1,%eax
		jne    jump_ef0bf
		movb   $0x1,EXPORT_SYMBOL(DangerMusicFadeRelease)
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(DangerMusicFadeActive)
		pop    %edi
		pop    %esi
		pop    %ebx
		ret
	jump_ef0bf:
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicFadeActive)
		je     jump_ef146
		mov    EXPORT_SYMBOL(DangerMusicVolumeChange),%al
		add    %al,EXPORT_SYMBOL(DangerMusicVolume)
		xor    %bl,%bl
		jmp    jump_ef0dd
	jump_ef0db:
		inc    %bl
	jump_ef0dd:
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x10,%eax
		jge    jump_ef146
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicVoiceMessages)(%eax)
		je     jump_ef0db
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(DangerMusicVolume),%al
		push   %eax
		mov    %bl,%al
		push   $0xb
		or     $0xb0,%al
		and    $0xff,%eax
		push   %eax
		mov    SongHandle,%esi
		push   %esi
		mov    MusicDriver,%edi
		push   %edi
		call   ac_AIL_send_channel_voice_message
		add    $0x14,%esp
		jmp    jump_ef0db
	jump_ef11b:
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%ebx
		push   %ebx
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(DangerMusicFadeActive)
		movb   $0x1,EXPORT_SYMBOL(CurrentDangerMusicFadeDirection)
		mov    %bl,EXPORT_SYMBOL(DangerMusicVolume)
		movb   $0xff,EXPORT_SYMBOL(DangerMusicVolumeChange)
	jump_ef146:
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_DangerMusicFadeSwitch)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %al,%bl
		mov    %dl,%bh
		cmpb   $0x0,EXPORT_SYMBOL(DisableDangerMusic)
		jne    jump_ef27c
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicAble)
		je     jump_ef27c
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ef27c
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ef27c
		cmpb   $0x0,MusicActive
		je     jump_ef27c
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ef27c
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_sequence_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_ef27c
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(CurrentDangerMusicFadeDirection),%dl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    %eax,%edx
		je     jump_ef27c
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicFadeActive)
		je     jump_ef1eb
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%ecx
		push   %ecx
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
	jump_ef1eb:
		mov    %bl,EXPORT_SYMBOL(CurrentDangerMusicFadeDirection)
		negb   EXPORT_SYMBOL(DangerMusicVolumeChange)
		movb   $0x1,EXPORT_SYMBOL(DangerMusicFadeActive)
		mov    %bh,%bl
		and    $0xff,%ebx
		cmp    $0x4,%ebx
		jg     jump_ef248
		cmp    $0x1,%ebx
		jl     jump_ef248
		xor    %cl,%cl
		push   $ac_DangerMusicFadeTick
		mov    %cl,EXPORT_SYMBOL(DangerMusicFadeRelease)
		call   ac_AIL_register_timer
		mov    %eax,%edx
		mov    %eax,EXPORT_SYMBOL(DangerMusicFadeHandle)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		add    $0x4,%esp
		add    %eax,%eax
		push   %eax
		push   %edx
		call   ac_AIL_set_timer_frequency
		add    $0x8,%esp
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%edi
		push   %edi
		jmp    jump_ef274
	jump_ef248:
		xor    %dh,%dh
		push   $ac_DangerMusicFadeTick
		mov    %dh,EXPORT_SYMBOL(DangerMusicFadeRelease)
		call   ac_AIL_register_timer
		add    $0x4,%esp
		push   $0x1e
		push   %eax
		mov    %eax,EXPORT_SYMBOL(DangerMusicFadeHandle)
		call   ac_AIL_set_timer_frequency
		add    $0x8,%esp
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%esi
		push   %esi
	jump_ef274:
		call   ac_AIL_start_timer
		add    $0x4,%esp
	jump_ef27c:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SetMusicTempo)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %eax,%ebx
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ef2dd
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ef2dd
		cmpb   $0x0,MusicActive
		je     jump_ef2dd
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(CurrentTempo),%ax
		cmp    %ebx,%eax
		je     jump_ef2dd
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ef2dd
		push   %edx
		push   %ebx
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_set_sequence_tempo
		add    $0xc,%esp
		mov    %bx,EXPORT_SYMBOL(CurrentTempo)
	jump_ef2dd:
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SetMusicTempoNormal)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ef334
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ef334
		cmpb   $0x0,MusicActive
		je     jump_ef334
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(CurrentTempo),%ax
		cmp    $0x64,%eax
		je     jump_ef334
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ef334
		push   $0x0
		push   $0x64
		mov    SongHandle,%edx
		push   %edx
		mov    $0x64,%ebx
		call   ac_AIL_set_sequence_tempo
		add    $0xc,%esp
		mov    %bx,EXPORT_SYMBOL(CurrentTempo)
	jump_ef334:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_ReleaseLoopedSample)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		cmpb   $0x0,SoundInstalled
		je     jump_ef3aa
		cmpb   $0x0,SoundAble
		je     jump_ef3aa
		cmpb   $0x0,SoundActive
		je     jump_ef3aa
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ef382
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_ef375:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_ef3aa
	jump_ef382:
		cmp    0xe(%ebx),%esi
		jne    jump_ef375
		cmp    0x12(%ebx),%di
		jne    jump_ef375
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ef375
		push   $0x1
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_set_sample_loop_count
		add    $0x8,%esp
	jump_ef3aa:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SetSamplePitch)
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebp
		mov    %edx,%edi
		mov    %ebx,%esi
		cmpb   $0x0,SoundInstalled
		je     jump_ef451
		cmpb   $0x0,SoundAble
		je     jump_ef451
		cmpb   $0x0,SoundActive
		je     jump_ef451
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_ef400
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_ef3f3:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_ef451
	jump_ef400:
		cmp    0xe(%ebx),%ebp
		jne    jump_ef3f3
		cmp    0x12(%ebx),%di
		jne    jump_ef3f3
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_ef3f3
		movswl %si,%eax
		test   %eax,%eax
		jle    jump_ef3f3
		xor    %edx,%edx
		mov    0x8(%ebx),%dx
		cmp    %eax,%edx
		je     jump_ef3f3
		mov    EXPORT_SYMBOL(SampleRate),%edx
		imul   %eax,%edx
		mov    $0x64,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		push   %eax
		mov    (%ebx),%ecx
		push   %ecx
		call   ac_AIL_set_sample_playback_rate
		add    $0x8,%esp
		mov    %si,0x8(%ebx)
	jump_ef451:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SetMusicVolume) /* 0xee980 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ebx
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_ee9dc
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_ee9dc
		cmpb   $0x0,MusicActive
		je     jump_ee9dc
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_ee9dc
		movzbl %dl,%esi
		cmp    $0x7f,%esi
		jg     jump_ee9dc
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_sequence_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_ee9dc
		xor    %eax,%eax
		mov    %bx,%ax
		push   %eax
		push   %esi
		mov    SongHandle,%ebx
		push   %ebx
		call   ac_AIL_set_sequence_volume
		add    $0xc,%esp
	jump_ee9dc:
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_cb_get_trigger_info:	/* 0x0F0340 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x18(%esp),%ebx
		cmpl   $0x0,0x1c(%esp)
		jne    jump_f03ac
		movb   $0x1,EXPORT_SYMBOL(DangerMusicAble)
		mov    %ebx,%eax
		mov    EXPORT_SYMBOL(DisableDangerMusic),%dl
		or     $0xb0,%al
		test   %dl,%dl
		je     jump_f0389
		push   $0x7f
		push   $0x6b
		push   %eax
		mov    SongHandle,%edi
		push   %edi
		mov    MusicDriver,%ebp
		push   %ebp
		call   ac_AIL_send_channel_voice_message
		add    $0x14,%esp
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(DangerMusicAble)
		jmp    jump_f03ac
	jump_f0389:
		push   $0x0
		push   $0xb
		push   %eax
		mov    SongHandle,%ecx
		push   %ecx
		mov    MusicDriver,%esi
		push   %esi
		call   ac_AIL_send_channel_voice_message
		mov    $0x1,%dh
		add    $0x14,%esp
		mov    %dh,EXPORT_SYMBOL(DangerMusicVoiceMessages)(%ebx)
	jump_f03ac:
		cmpl   $0x1,0x1c(%esp)
		jne    jump_f03ef
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_stop_sequence
		add    $0x4,%esp
		push   $0x1
		push   $0x0
		or     $0xb0,%bl
		push   %ebx
		mov    SongHandle,%ebx
		push   %ebx
		mov    MusicDriver,%ecx
		push   %ecx
		call   ac_AIL_send_channel_voice_message
		add    $0x14,%esp
		mov    SongHandle,%esi
		push   %esi
		call   ac_AIL_resume_sequence
		add    $0x4,%esp
	jump_f03ef:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* int fm_instrument_file_exists(char *fname)
 */
GLOBAL_FUNC (ASM_fm_instrument_file_exists)
/*----------------------------------------------------------------*/
		push   %edx
		xor    %edx,%edx
		call   ac_dos_access
		test   %eax,%eax
		sete   %al
		and    $0xff,%eax
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_InitAllBullfrogSoundTimers)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		jne    jump_1004d4
		cmpb   $0x0,SoundInstalled
		je     jump_1004e5
	jump_1004d4:
		mov    $0x19,%ebx
		mov    $EXPORT_SYMBOL(sound_timer),%eax
		xor    %edx,%edx
		call   ac_memset
	jump_1004e5:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_InitStreamedSound)
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		cmpb   $0x0,SoundInstalled
		je     jump_1006ae
		cmpb   $0x0,SoundAble
		je     jump_1006ae
		cmpb   $0x0,EXPORT_SYMBOL(StreamedSoundAble)
		jne    jump_1006ae
#if 0
		call   flushall_
		mov    $data_159392,%eax
		xor    %edx,%edx
		call   ac_setbuf
#endif
		call   ac_allocate_buffers
		test   %eax,%eax
		jne    jump_10065a
		mov    $aBf100CannotAll,%esi
		mov    $SoundProgressMessage,%edi
		call   ac_free_buffers
		push   %edi
	jump_100635:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_10064d
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_100635
	jump_10064d:
		pop    %edi
		mov    %edi,%eax
		call   ac_SoundProgressLog
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		ret
	jump_10065a:
		mov    EXPORT_SYMBOL(SoundDriver),%edx
		push   %edx
		call   ac_AIL_allocate_sample_handle
		add    $0x4,%esp
		mov    %eax,sample_handle
		test   %eax,%eax
		jne    jump_1006a7
		mov    $aBf100CannotA_0,%esi
		mov    $SoundProgressMessage,%edi
		call   ac_free_buffers
		push   %edi
	jump_100682:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_10069a
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_100682
	jump_10069a:
		pop    %edi
		mov    %edi,%eax
		call   ac_SoundProgressLog
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		ret
	jump_1006a7:
		movb   $0x1,EXPORT_SYMBOL(StreamedSoundAble)
	jump_1006ae:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_FreeStreamedSound)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    EXPORT_SYMBOL(sample_file),%edx
		cmp    $0xffffffff,%edx
		je     jump_1006df
		mov    %edx,%eax
		mov    $0xffffffff,%ebx
		call   ac_LbFileClose
		mov    %ebx,EXPORT_SYMBOL(sample_file)
	jump_1006df:
		call   ac_SwitchOffStreamedSound
		call   ac_free_buffers
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(StreamedSoundAble)
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SwitchOffStreamedSound)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		cmpb   $0x0,EXPORT_SYMBOL(StreamedSoundAble)
		je     jump_100d1b
		cmpb   $0x0,EXPORT_SYMBOL(ssnd_active)
		je     jump_100d1b
		mov    sample_handle,%edx
		push   %edx
		mov    $0x4000,%ebx
		call   ac_AIL_end_sample
		add    $0x4,%esp
		mov    EXPORT_SYMBOL(ssnd_buffer)+0,%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x4000,%ebx
		mov    EXPORT_SYMBOL(ssnd_buffer)+4,%eax
		xor    %edx,%edx
		call   ac_memset
		mov    EXPORT_SYMBOL(sample_file),%ebx
		cmp    $0xffffffff,%ebx
		je     jump_100cec
		mov    %ebx,%eax
		mov    $0xffffffff,%ecx
		call   ac_LbFileClose
		mov    %ecx,EXPORT_SYMBOL(sample_file)
	jump_100cec:
		cmpl   $0x0,EXPORT_SYMBOL(adpcm_file_open)
		je     jump_100d02
		xor    %edi,%edi
		call   ac_close_adpcm_file
		mov    %edi,EXPORT_SYMBOL(adpcm_file_open)
	jump_100d02:
		cmpb   $0x0,EXPORT_SYMBOL(mixed_file_open)
		je     jump_100d13
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(mixed_file_open)
	jump_100d13:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(ssnd_active)
	jump_100d1b:
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_allocate_buffers)
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		mov    $0x8000,%eax
		call   ac_LbMemoryAlloc
		mov    %eax,EXPORT_SYMBOL(mixer_buffer)
		test   %eax,%eax
		je     jump_100ff9
		mov    $0x800,%eax
		call   ac_LbMemoryAlloc
		mov    %eax,EXPORT_SYMBOL(adpcm_source_buffer)
		test   %eax,%eax
		je     jump_100ff9
		push   $0x4000
		call   ac_AIL_MEM_alloc_lock
		add    $0x4,%esp
		mov    %eax,EXPORT_SYMBOL(ssnd_buffer)+0
		test   %eax,%eax
		je     jump_100ff9
		push   $0x4000
		call   ac_AIL_MEM_alloc_lock
		add    $0x4,%esp
		mov    %eax,EXPORT_SYMBOL(ssnd_buffer)+4
		test   %eax,%eax
		je     jump_100ff9
		mov    $0x1,%eax
	jump_100ff9:
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_free_buffers)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %ebp
		mov    EXPORT_SYMBOL(ssnd_buffer)+0,%edx
		test   %edx,%edx
		je     jump_101025
		push   $0x4000
		push   %edx
		call   ac_AIL_MEM_free_lock
		xor    %ecx,%ecx
		add    $0x8,%esp
		mov    %ecx,EXPORT_SYMBOL(ssnd_buffer)+0
	jump_101025:
		mov    EXPORT_SYMBOL(ssnd_buffer)+4,%esi
		test   %esi,%esi
		je     jump_101045
		push   $0x4000
		push   %esi
		xor    %ebp,%ebp
		call   ac_AIL_MEM_free_lock
		add    $0x8,%esp
		mov    %ebp,EXPORT_SYMBOL(ssnd_buffer)+4
	jump_101045:
		mov    EXPORT_SYMBOL(adpcm_source_buffer),%eax
		test   %eax,%eax
		je     jump_10105b
		xor    %edx,%edx
		call   ac_LbMemoryFree
		mov    %edx,EXPORT_SYMBOL(adpcm_source_buffer)
	jump_10105b:
		mov    EXPORT_SYMBOL(mixer_buffer),%ebx
		test   %ebx,%ebx
		je     jump_101074
		mov    %ebx,%eax
		xor    %ecx,%ecx
		call   ac_LbMemoryFree
		mov    %ecx,EXPORT_SYMBOL(mixer_buffer)
	jump_101074:
		pop    %ebp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_StopMusic)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_108c5a
		cmpb   $0x0,EXPORT_SYMBOL(MusicAble)
		je     jump_108c5a
		cmpb   $0x0,MusicActive
		je     jump_108c5a
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_108c5a
		cmpb   $0x0,EXPORT_SYMBOL(DangerMusicFadeActive)
		je     jump_108bfd
		mov    EXPORT_SYMBOL(DangerMusicFadeHandle),%edx
		push   %edx
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
	jump_108bfd:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(DangerMusicAble)
		mov    %bh,EXPORT_SYMBOL(DangerMusicFadeActive)
		movb   $0x1,EXPORT_SYMBOL(CurrentDangerMusicFadeDirection)
		mov    %bh,EXPORT_SYMBOL(DangerMusicVolume)
		movb   $0xff,EXPORT_SYMBOL(DangerMusicVolumeChange)
		mov    SongHandle,%ebx
		push   %ebx
		call   ac_AIL_sequence_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_108c51
		mov    SongHandle,%ecx
		push   %ecx
		call   ac_AIL_stop_sequence
		add    $0x4,%esp
		mov    SongHandle,%esi
		push   %esi
		call   ac_AIL_end_sequence
		add    $0x4,%esp
	jump_108c51:
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(SongCurrentlyPlaying)
	jump_108c5a:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_FreeMusic)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		je     jump_108d00
		cmpw   $0x0,EXPORT_SYMBOL(SongCurrentlyPlaying)
		je     jump_108ca3
		mov    SongHandle,%edx
		push   %edx
		call   ac_AIL_stop_sequence
		add    $0x4,%esp
		mov    SongHandle,%ebx
		push   %ebx
		call   ac_AIL_end_sequence
		xor    %ebx,%ebx
		add    $0x4,%esp
		mov    %bx,EXPORT_SYMBOL(SongCurrentlyPlaying)
	jump_108ca3:
		xor    %eax,%eax
		mov    Awe32SoundfontLoaded,%al
		cmp    $0x1,%eax
		jne    jump_108cb4
		call   ac_FreeAwe32Soundfont
	jump_108cb4:
		cmpb   $0x0,SoundInstalled
		jne    jump_108cc2
		call   ac_AIL_shutdown
	jump_108cc2:
		mov    BfMusic,%ecx
		test   %ecx,%ecx
		je     jump_108cdb
		mov    %ecx,%eax
		xor    %esi,%esi
		call   ac_LbMemoryFree
		mov    %esi,BfEndMusic
	jump_108cdb:
		mov    BfMusicData,%edi
		test   %edi,%edi
		je     jump_108cec
		mov    %edi,%eax
		call   ac_LbMemoryFree
	jump_108cec:
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(MusicAble)
		mov    %dh,MusicActive
		mov    %dh,EXPORT_SYMBOL(MusicInstalled)
	jump_108d00:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_FreeSound)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmpb   $0x0,SoundInstalled
		je     jump_108d6d
		call   ac_StopAllSamples
		cmpb   $0x0,EXPORT_SYMBOL(MusicInstalled)
		jne    jump_108d2f
		call   ac_AIL_shutdown
	jump_108d2f:
		mov    EXPORT_SYMBOL(Sfx),%edx
		test   %edx,%edx
		je     jump_108d48
		mov    %edx,%eax
		xor    %ebx,%ebx
		call   ac_LbMemoryFree
		mov    %ebx,EXPORT_SYMBOL(EndSfxs)
	jump_108d48:
		mov    EXPORT_SYMBOL(SfxData),%ecx
		test   %ecx,%ecx
		je     jump_108d59
		mov    %ecx,%eax
		call   ac_LbMemoryFree
	jump_108d59:
		xor    %dh,%dh
		mov    %dh,SoundAble
		mov    %dh,SoundActive
		mov    %dh,SoundInstalled
	jump_108d6d:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SetSampleVolume)	/* 0xf0a20 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebp
		mov    %edx,%edi
		mov    %ebx,%esi
		cmpb   $0x0,SoundInstalled
		je     jump_f0aaa
		cmpb   $0x0,SoundAble
		je     jump_f0aaa
		cmpb   $0x0,SoundActive
		je     jump_f0aaa
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_f0a6c
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_f0a5f:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f0aaa
	jump_f0a6c:
		cmp    0xe(%ebx),%ebp
		jne    jump_f0a5f
		cmp    0x12(%ebx),%di
		jne    jump_f0a5f
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_f0a5f
		movswl %si,%eax
		test   %eax,%eax
		jl     jump_f0a5f
		cmp    $0x7f,%eax
		jg     jump_f0a5f
		cmp    0x4(%ebx),%eax
		je     jump_f0a5f
		push   %eax
		mov    (%ebx),%edi
		push   %edi
		call   ac_AIL_set_sample_volume
		add    $0x8,%esp
		movswl %si,%eax
		mov    %eax,0x4(%ebx)
	jump_f0aaa:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SetSamplePan)	/* 0xF0AB0 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%edi
		mov    %edx,(%esp)
		mov    %ebx,%esi
		cmpb   $0x0,SoundInstalled
		je     jump_f0b31
		cmpb   $0x0,SoundAble
		je     jump_f0b31
		cmpb   $0x0,SoundActive
		je     jump_f0b31
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_f0af8
		jmp    jump_f0b31
	jump_f0aeb:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f0b31
	jump_f0af8:
		cmp    0xe(%ebx),%edi
		jne    jump_f0aeb
		mov    (%esp),%edx
		cmp    0x12(%ebx),%dx
		jne    jump_f0aeb
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_f0aeb
		cmp    0xa(%ebx),%si
		je     jump_f0aeb
		xor    %eax,%eax
		mov    %si,%ax
		push   %eax
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_set_sample_pan
		add    $0x8,%esp
		mov    %si,0xa(%ebx)
	jump_f0b31:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_StopSample)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		cmpb   $0x0,SoundInstalled
		je     jump_f1788
		cmpb   $0x0,SoundAble
		je     jump_f1788
		cmpb   $0x0,SoundActive
		je     jump_f1788
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_f1762
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_f1755:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f1788
	jump_f1762:
		cmp    0xe(%ebx),%esi
		jne    jump_f1755
		cmp    0x12(%ebx),%di
		jne    jump_f1755
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_f1755
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_end_sample
		add    $0x4,%esp
	jump_f1788:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_PlaySampleFromAddress)
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,0x4(%esp)
		mov    %ecx,(%esp)
		mov    0x24(%esp),%al
		cmpb   $0x0,SoundInstalled
		je     jump_f17cc
		cmpb   $0x0,SoundAble
		je     jump_f17cc
		cmpb   $0x0,SoundActive
		jne    jump_f1918
	jump_f17cc:
		xor    %eax,%eax
	jump_f17ce:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_f17d7:
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%eax
		xor    %ebp,%ebp
		cmp    %ebx,%eax
		jae    jump_f17fd
		jmp    jump_f1934
	jump_f17ec:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f1934
	jump_f17fd:
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		jne    jump_f17ec
		xor    %edx,%edx
		mov    %ebx,%ebp
		mov    %edx,0x8(%esp)
		jmp    jump_f1934
	jump_f181a:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		mov    %ebx,0x8(%esp)
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    %ebx,%ecx
		jae    jump_f183e
		jmp    jump_f185d
	jump_f1831:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f185d
	jump_f183e:
		cmp    0xe(%ebx),%esi
		jne    jump_f1831
		cmp    0x12(%ebx),%di
		jne    jump_f1831
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		je     jump_f1831
		mov    %ebx,0x8(%esp)
	jump_f185d:
		cmpl   $0x0,0x8(%esp)
		jne    jump_f1934
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		xor    %ebp,%ebp
		cmp    %ebx,%ecx
		jae    jump_f188e
		jmp    jump_f1934
	jump_f187e:
		mov    EXPORT_SYMBOL(end_sample_id),%eax
		add    $0x19,%ebx
		cmp    %eax,%ebx
		ja     jump_f1934
	jump_f188e:
		mov    (%ebx),%edx
		push   %edx
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		jne    jump_f187e
		mov    %ebx,%ebp
		jmp    jump_f1934
	jump_f18a5:
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%edx
		xor    %al,%al
		cmp    %ebx,%edx
		jae    jump_f18c5
		jmp    jump_f18da
	jump_f18b8:
		mov    EXPORT_SYMBOL(end_sample_id),%edx
		add    $0x19,%ebx
		cmp    %edx,%ebx
		ja     jump_f18da
	jump_f18c5:
		cmp    0xe(%ebx),%esi
		jne    jump_f18b8
		cmp    0x12(%ebx),%di
		jne    jump_f18b8
		xor    %eax,%eax
		mov    %ebx,%ebp
		mov    %eax,0x8(%esp)
		mov    $0x1,%al
	jump_f18da:
		test   %al,%al
		jne    jump_f1934
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		mov    EXPORT_SYMBOL(end_sample_id),%edx
		xor    %ebp,%ebp
		cmp    %ebx,%edx
		jae    jump_f18fe
		jmp    jump_f1934
	jump_f18f1:
		mov    EXPORT_SYMBOL(end_sample_id),%ecx
		add    $0x19,%ebx
		cmp    %ecx,%ebx
		ja     jump_f1934
	jump_f18fe:
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x2,%eax
		jne    jump_f18f1
		xor    %edx,%edx
		mov    %ebx,%ebp
		mov    %edx,0x8(%esp)
		jmp    jump_f1934
	jump_f1918:
		cmp    $0x2,%al
		jb     jump_f192c
		jbe    jump_f181a
		cmp    $0x3,%al
		je     jump_f18a5
		jmp    jump_f1934
	jump_f192c:
		cmp    $0x1,%al
		je     jump_f17d7
	jump_f1934:
		test   %ebp,%ebp
		je     jump_f17cc
		cmpl   $0x0,0x8(%esp)
		jne    jump_f17cc
		mov    0x0(%ebp),%ecx
		push   %ecx
		call   ac_AIL_init_sample
		add    $0x4,%esp
		mov    0x28(%esp),%eax
		test   %eax,%eax
		je     jump_f17ce
		push   $0x1
		push   %eax
		mov    0x0(%ebp),%ebx
		push   %ebx
		call   ac_AIL_set_sample_file
		add    $0xc,%esp
		mov    0x4(%esp),%ecx
		push   %ecx
		mov    0x0(%ebp),%eax
		push   %eax
		call   ac_AIL_set_sample_volume
		mov    StereoSound,%bl
		add    $0x8,%esp
		test   %bl,%bl
		je     jump_f1999
		mov    (%esp),%edx
		push   %edx
		mov    0x0(%ebp),%ebx
		push   %ebx
		call   ac_AIL_set_sample_pan
		add    $0x8,%esp
	jump_f1999:
		movsbl 0x20(%esp),%eax
		inc    %eax
		push   %eax
		mov    0x0(%ebp),%ecx
		push   %ecx
		call   ac_AIL_set_sample_loop_count
		add    $0x8,%esp
		mov    0x0(%ebp),%eax
		push   %eax
		call   ac_AIL_start_sample
		mov    %esi,0xe(%ebp)
		add    $0x4,%esp
		mov    %di,0x12(%ebp)
		mov    0x4(%esp),%eax
		mov    %eax,0x4(%ebp)
		mov    (%esp),%eax
		mov    %ax,0xa(%ebp)
		mov    0x1c(%esp),%eax
		mov    %ax,0x8(%ebp)
		movb   $0x0,0x14(%ebp)
		movb   $0x0,0x15(%ebp)
		mov    %ebp,%eax
		movb   $0x0,0x17(%ebp)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
AWEGetTotalRAM_:
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		sub    $0xc,%esp
		mov    %esp,%ecx
		push   %ecx
		mov    $0x10,%edx
		push   %ecx
		mov    %dx,0xc(%esp)
		push   $0x506
		mov    (%eax),%edx
		push   %edx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
		test   %eax,%eax
		jne    jump_10ffec
		movswl 0x8(%esp),%ecx
		movswl 0x6(%esp),%eax
		add    $0x10,%ecx
		shl    %cl,%eax
		jmp    jump_10fff1
	jump_10ffec:
		mov    $0xffffffff,%eax
	jump_10fff1:
		add    $0xc,%esp
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
AWEDefMemMap_:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		cmpl   $0x0,awe_data
		jne    jump_110042
		cmpw   $0x0,awe_data_sel
		jne    jump_110042
		mov    $0x4,%eax
		call   ASM_AllocDOSmem
		mov    %dx,awe_data_sel
		mov    %eax,awe_data
		test   %eax,%eax
		jne    jump_110042
		test   %dx,%dx
		jne    jump_110042
		mov    $0xffffffff,%eax
		jmp    jump_1100a7
	jump_110042:
		lgs    awe_data,%eax
		mov    %ecx,%edx
		mov    %si,%gs:(%eax)
		mov    %ebx,%eax
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    awe_data_sel,%gs
		mov    %eax,%ebx
		mov    awe_data,%eax
		mov    %bx,%gs:0x2(%eax)
		mov    $0x11,%ebx
		mov    %gs,%edx
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    %ax,0x6(%esp)
		mov    %esp,%eax
		push   %eax
		xor    %ecx,%ecx
		push   %eax
		mov    %cx,0x10(%esp)
		push   $0x506
		mov    (%edi),%ebx
		push   %ebx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
	jump_1100a7:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AWEGetSFInfo_:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		cmpl   $0x0,awe_data
		jne    jump_1100ef
		cmpw   $0x0,awe_data_sel
		jne    jump_1100ef
		mov    $0x4,%eax
		call   ASM_AllocDOSmem
		mov    %dx,awe_data_sel
		mov    %eax,awe_data
		test   %eax,%eax
		jne    jump_1100ef
		test   %dx,%dx
		je     jump_11016d
	jump_1100ef:
		lgs    awe_data,%eax
		mov    %ecx,%edx
		mov    %si,%gs:(%eax)
		mov    %ebx,%eax
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    awe_data_sel,%gs
		mov    %eax,%ebx
		mov    awe_data,%eax
		mov    %bx,%gs:0x2(%eax)
		mov    $0x17,%ebx
		mov    %gs,%edx
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    %ax,0x6(%esp)
		mov    %esp,%eax
		push   %eax
		xor    %ecx,%ecx
		push   %eax
		mov    %cx,0x10(%esp)
		push   $0x506
		mov    (%edi),%ebx
		push   %ebx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
		test   %eax,%eax
		jne    jump_11016d
		movswl 0x6(%esp),%eax
		movswl 0x8(%esp),%ebx
		call   CreateSelector_
		mov    %eax,%edx
		mov    %ebx,%eax
		jmp    jump_110171
	jump_11016d:
		xor    %edx,%edx
		xor    %eax,%eax
	jump_110171:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AWEStreamSample_:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		cmpl   $0x0,awe_data
		jne    jump_1101c2
		cmpw   $0x0,awe_data_sel
		jne    jump_1101c2
		mov    $0x4,%eax
		call   ASM_AllocDOSmem
		mov    %dx,awe_data_sel
		mov    %eax,awe_data
		test   %eax,%eax
		jne    jump_1101c2
		test   %dx,%dx
		jne    jump_1101c2
		mov    $0xffffffff,%eax
		jmp    jump_110227
	jump_1101c2:
		lgs    awe_data,%eax
		mov    %ecx,%edx
		mov    %si,%gs:(%eax)
		mov    %ebx,%eax
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    awe_data_sel,%gs
		mov    %eax,%ebx
		mov    awe_data,%eax
		mov    %bx,%gs:0x2(%eax)
		mov    $0x18,%ebx
		mov    %gs,%edx
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    %ax,0x6(%esp)
		mov    %esp,%eax
		push   %eax
		xor    %ecx,%ecx
		push   %eax
		mov    %cx,0x10(%esp)
		push   $0x506
		mov    (%edi),%ebx
		push   %ebx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
	jump_110227:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
AWELoadPreset_:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		cmpl   $0x0,awe_data
		jne    jump_110272
		cmpw   $0x0,awe_data_sel
		jne    jump_110272
		mov    $0x4,%eax
		call   ASM_AllocDOSmem
		mov    %dx,awe_data_sel
		mov    %eax,awe_data
		test   %eax,%eax
		jne    jump_110272
		test   %dx,%dx
		jne    jump_110272
		mov    $0xffffffff,%eax
		jmp    jump_1102d7
	jump_110272:
		lgs    awe_data,%eax
		mov    %ecx,%edx
		mov    %si,%gs:(%eax)
		mov    %ebx,%eax
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    awe_data_sel,%gs
		mov    %eax,%ebx
		mov    awe_data,%eax
		mov    %bx,%gs:0x2(%eax)
		mov    $0x19,%ebx
		mov    %gs,%edx
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		call   GetDOSseg_
		mov    %ax,0x6(%esp)
		mov    %esp,%eax
		push   %eax
		xor    %ecx,%ecx
		push   %eax
		mov    %cx,0x10(%esp)
		push   $0x506
		mov    (%edi),%ebx
		push   %ebx
		call   ac_AIL_call_driver
		add    $0x10,%esp
		movswl (%esp),%eax
	jump_1102d7:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
/* void cbfadesample(unsigned long)
 */
ASM_cbfadesample:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %ebp
		sub    $0x4,%esp
		cmpb   $0x0,SoundInstalled
		je     jump_10939c
		cmpb   $0x0,SoundAble
		je     jump_10939c
		cmpb   $0x0,SoundActive
		je     jump_10939c
		mov    EXPORT_SYMBOL(switch_off_sample_fade_timer),%cl
		test   %cl,%cl
		je     jump_1091bb
		mov    EXPORT_SYMBOL(sample_fade_handle),%esi
		push   %esi
		call   ac_AIL_release_timer_handle
		add    $0x4,%esp
		jmp    jump_1093cb
	jump_1091bb:
		mov    %cl,EXPORT_SYMBOL(a_sample_is_fading)
		mov    $EXPORT_SYMBOL(sample_id),%ebx
		cmp    EXPORT_SYMBOL(end_sample_id),%ebx
		jbe    jump_109375
	jump_1091d2:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(a_sample_is_fading),%al
		test   %eax,%eax
		jne    jump_1093cb
		movb   $0x1,EXPORT_SYMBOL(switch_off_sample_fade_timer)
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(samples_currently_fading)
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ebx
		ret
	jump_1091f7:
		movb   $0x1,EXPORT_SYMBOL(a_sample_is_fading)
		mov    (%ebx),%esi
		push   %esi
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_1092bd
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    $0x7f,%eax
		jle    jump_109223
		movw   $0x7f,0xc(%ebx)
	jump_109223:
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    0x4(%ebx),%eax
		jg     jump_109247
		movb   $0x0,0x14(%ebx)
		cmpb   $0x0,0x15(%ebx)
		je     jump_109247
		mov    (%ebx),%ebp
		push   %ebp
		call   ac_AIL_end_sample
		add    $0x4,%esp
		movb   $0x0,0x15(%ebx)
	jump_109247:
		xor    %eax,%eax
		mov    0x14(%ebx),%al
		cmp    $0x1,%eax
		jne    jump_10938a
		movb   $0x1,(%esp)
		mov    (%esp),%al
		cmp    0x16(%ebx),%al
		jbe    jump_109271
		jmp    jump_1092a9
	jump_109263:
		mov    (%esp),%al
		incb   (%esp)
		mov    (%esp),%al
		cmp    0x16(%ebx),%al
		ja     jump_1092a9
	jump_109271:
		incl   0x4(%ebx)
		cmpl   $0x7f,0x4(%ebx)
		jl     jump_109295
		movl   $0x7f,0x4(%ebx)
		mov    0x4(%ebx),%eax
		push   %eax
		mov    (%ebx),%ecx
		push   %ecx
		call   ac_AIL_set_sample_volume
		add    $0x8,%esp
		jmp    jump_10938a
	jump_109295:
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    0x4(%ebx),%eax
		jg     jump_109263
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		mov    %eax,0x4(%ebx)
	jump_1092a9:
		mov    0x4(%ebx),%eax
		push   %eax
		mov    (%ebx),%ecx
		push   %ecx
		call   ac_AIL_set_sample_volume
		add    $0x8,%esp
		jmp    jump_10938a
	jump_1092bd:
		movb   $0x0,0x14(%ebx)
		movb   $0x0,0x15(%ebx)
		jmp    jump_10938a
	jump_1092ca:
		movb   $0x1,EXPORT_SYMBOL(a_sample_is_fading)
		mov    (%ebx),%eax
		push   %eax
		call   ac_AIL_sample_status
		add    $0x4,%esp
		cmp    $0x4,%eax
		jne    jump_1092bd
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    0x4(%ebx),%eax
		jl     jump_109305
		movb   $0x0,0x14(%ebx)
		cmpb   $0x0,0x15(%ebx)
		je     jump_109305
		mov    (%ebx),%ecx
		push   %ecx
		call   ac_AIL_end_sample
		add    $0x4,%esp
		movb   $0x0,0x15(%ebx)
	jump_109305:
		xor    %eax,%eax
		mov    0x14(%ebx),%al
		cmp    $0x2,%eax
		jne    jump_10938a
		movb   $0x1,(%esp)
		mov    (%esp),%al
		cmp    0x16(%ebx),%al
		jbe    jump_10932f
		jmp    jump_109364
	jump_109321:
		mov    (%esp),%al
		incb   (%esp)
		mov    (%esp),%al
		cmp    0x16(%ebx),%al
		ja     jump_109364
	jump_10932f:
		decl   0x4(%ebx)
		cmpl   $0x0,0x4(%ebx)
		jg     jump_109350
		movl   $0x0,0x4(%ebx)
		mov    0x4(%ebx),%eax
		push   %eax
		mov    (%ebx),%esi
		push   %esi
		call   ac_AIL_set_sample_volume
		add    $0x8,%esp
		jmp    jump_10938a
	jump_109350:
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		cmp    0x4(%ebx),%eax
		jl     jump_109321
		xor    %eax,%eax
		mov    0xc(%ebx),%ax
		mov    %eax,0x4(%ebx)
	jump_109364:
		mov    0x4(%ebx),%eax
		push   %eax
		mov    (%ebx),%esi
		push   %esi
		call   ac_AIL_set_sample_volume
		add    $0x8,%esp
		jmp    jump_10938a
	jump_109375:
		mov    0x14(%ebx),%al
		cmp    $0x1,%al
		jb     jump_10938a
		jbe    jump_1091f7
		cmp    $0x2,%al
		je     jump_1092ca
	jump_10938a:
		mov    EXPORT_SYMBOL(end_sample_id),%ebp
		add    $0x19,%ebx
		cmp    %ebp,%ebx
		jbe    jump_109375
		jmp    jump_1091d2
	jump_10939c:
		movb   $0x1,EXPORT_SYMBOL(switch_off_sample_fade_timer)
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(samples_currently_fading)
		mov    $EXPORT_SYMBOL(sample_id),%eax
		cmp    EXPORT_SYMBOL(end_sample_id),%eax
		ja     jump_1093cb
		xor    %bl,%bl
	jump_1093ba:
		add    $0x19,%eax
		mov    %bl,-0x5(%eax)
		mov    %bl,-0x4(%eax)
		cmp    EXPORT_SYMBOL(end_sample_id),%eax
		jbe    jump_1093ba
	jump_1093cb:
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ebx
		ret


/* Part of FadeSample_ (0x1093F0) func, which was removed. No real reason to keep this. */
vtable_1093d4:
		.long   func_1094c9
		.long   func_1094cf
		.long   func_1094d5
		.long   func_1094db
		.long   func_1094e1


/*----------------------------------------------------------------*/
func_1094c9:
		movb   $0x1,0x16(%ebx)
		jmp    jump_1094e5
/*----------------------------------------------------------------*/
func_1094cf:
		movb   $0x2,0x16(%ebx)
		jmp    jump_1094e5
/*----------------------------------------------------------------*/
func_1094d5:
		movb   $0x3,0x16(%ebx)
		jmp    jump_1094e5
/*----------------------------------------------------------------*/
func_1094db:
		movb   $0x4,0x16(%ebx)
		jmp    jump_1094e5
/*----------------------------------------------------------------*/
func_1094e1:
		movb   $0x5,0x16(%ebx)
	jump_1094e5:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(samples_currently_fading),%al
		test   %eax,%eax
		jne    jump_10952c
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(switch_off_sample_fade_timer)
		mov    $0x1,%bh
		push   $ac_cbfadesample
		mov    %bh,EXPORT_SYMBOL(samples_currently_fading)
		call   ac_AIL_register_timer
		add    $0x4,%esp
		push   $0x14
		push   %eax
		mov    %eax,EXPORT_SYMBOL(sample_fade_handle)
		call   ac_AIL_set_timer_frequency
		add    $0x8,%esp
		mov    EXPORT_SYMBOL(sample_fade_handle),%esi
		push   %esi
		call   ac_AIL_start_timer
		add    $0x4,%esp
	jump_10952c:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
/* void cb_sample_queue_callback(_SAMPLE *sample)
 */
cb_sample_queue_callback:	/* 0x1095A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %esi
		push   %edi
		push   %ebp
		cmpb   $0x0,EXPORT_SYMBOL(sample_queue_handle_stopped)
		jne    jump_10964f
		mov    EXPORT_SYMBOL(current_sample_queue_count),%eax
		push   %eax
		mov    EXPORT_SYMBOL(sample_queue_handle),%edx
		push   %edx
		call   ac_AIL_sample_user_data
		add    $0x8,%esp
		test   %eax,%eax
		je     jump_10964f
		cmpl   $0x8,EXPORT_SYMBOL(current_sample_queue_count)
		jae    jump_10964f
		mov    EXPORT_SYMBOL(sample_queue_handle),%ecx
		push   %ecx
		call   ac_AIL_init_sample
		add    $0x4,%esp
		push   $cb_sample_queue_callback
		mov    EXPORT_SYMBOL(sample_queue_handle),%esi
		push   %esi
		call   ac_AIL_register_EOS_callback
		add    $0x8,%esp
		push   $0x1
		mov    EXPORT_SYMBOL(current_sample_queue_count),%eax
		push   %eax
		mov    EXPORT_SYMBOL(sample_queue_handle),%edi
		push   %edi
		call   ac_AIL_sample_user_data
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(Sfx),%eax
		shl    $0x5,%edx
		add    $0x8,%esp
		mov    0x12(%edx,%eax,1),%ebp
		push   %ebp
		mov    EXPORT_SYMBOL(sample_queue_handle),%eax
		push   %eax
		call   ac_AIL_set_sample_file
		add    $0xc,%esp
		mov    EXPORT_SYMBOL(current_sample_queue_count),%eax
		mov    EXPORT_SYMBOL(sample_queue_handle),%edx
		mov    EXPORT_SYMBOL(current_sample_queue_count),%ebx
		inc    %ebx
		push   %edx
		mov    %ebx,EXPORT_SYMBOL(current_sample_queue_count)
		call   ac_AIL_start_sample
		add    $0x4,%esp
	jump_10964f:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ebx
		ret



.section .rodata

/* unsigned char sample_queue_handle_stopped
 */
GLOBAL (sample_queue_handle_stopped)	/* 0x15958c */
		.byte	0x1
		.align	4

aBf100CannotAll:	/* 0x15FF78 */
		.string "BF100 - Cannot allocate buffers for streamed sound\n"
aBf100CannotA_0:	/* 0x15FFAC */
		.string "BF100 - Cannot allocate handle for streamed sound\n"
aBf100UnknownSt:	/* 0x15FFDF */
		.string "BF100 - Unknown streamed sample type %d\n"
aBf101CannotOpenFile:	/* 0x160008 */
		.string "BF101 - cannot open file %s\n"
aBf101CannotOpe:	/* 0x160025 */
		.string "BF101 - cannot open file %s\n"
aBf103Oversized:	/* 0x160042 */
		.string "BF103 - oversized ADPCM chunks (%ld)\n"
aGotAdpcmBlock:	/* 0x160068 */
		.string "Got adpcm block"

aSbawe32_mdi_0:	/* 0x1617F8 */
		.string "SBAWE32.MDI"
ascW_2:	/* 0x161804 */
		.ascii  "\x77\x00"
ascSS_sbk:	/* 0x161806 */
		.string "%s/%s.sbk"
aSbawe32_mdi_1:	/* 0x161810 */
		.string "SBAWE32.MDI"
data_16181c:
		.ascii  "\x77\x00\x00\x00"

.data

GLOBAL (disk_err)
		.long	0x0

GLOBAL (MaxNumberOfSamples)	/* 0x159300 */
		.long	0x0a
GLOBAL (SoundAble)	/* 159304 */
		.byte	0x1
GLOBAL (SixteenBit)
		.byte	0x1
GLOBAL (SoundActive)
		.byte	0x1
GLOBAL (AutoScanForSoundHardware)
		.byte	0x1
GLOBAL (StereoSound)
		.byte	0x1
GLOBAL (CurrentSoundBank)
		.byte	0x0ff
		.ascii  "\x00\x00"
GLOBAL (CurrentSoundMasterVolume)
		.long	0x7f
DirectSoundUsingGameSDKWindow:
		.long	0x01
GLOBAL (CurrentMusicMasterVolume)
		.long	0x7f
GLOBAL (MusicAble)
		.byte	0x1
GLOBAL (MusicActive)
		.byte	0x1
GLOBAL (CurrentDangerMusicFadeDirection)
		.byte	0x1
GLOBAL (DangerMusicVolumeChange)
		.byte	0xff
GLOBAL (sample_file)
		.ascii  "\xff\xff\xff\xff"
sample_volume:
		.long	0x7f
GLOBAL (ssnd_active)
		.long	0x01

GLOBAL (CurrentAwe32SoundfontPrefix)
		.string "Bullfrog"
		.align	4
GLOBAL (adpcm_handle)	/* 0x159E54 */
		.ascii  "\xff\xff\xff\xff"
adaption_table:	/* 0x159E58 */
		.ascii  "\xe6\x00\x00\x00\xe6\x00\x00\x00"
		.ascii  "\xe6\x00\x00\x00\xe6\x00\x00\x00"
		.ascii  "\x33\x01\x00\x00\x99\x01\x00\x00"
		.ascii  "\x00\x02\x00\x00\x66\x02\x00\x00"
		.ascii  "\x00\x03\x00\x00\x66\x02\x00\x00"
		.ascii  "\x00\x02\x00\x00\x99\x01\x00\x00"
		.ascii  "\x33\x01\x00\x00\xe6\x00\x00\x00"
		.ascii  "\xe6\x00\x00\x00\xe6\x00\x00\x00"

GLOBAL (FullDIG_INIPath)		/* 0x1e5a30 */
		.fill   0x90
GLOBAL (FullMDI_INIPath)		/* 0x1e5ac0 */
		.fill   0x90
GLOBAL (SoundDataPath)			/* 0x1e5b50 */
		.fill   0x90
GLOBAL (SoundDriverPath)		/* 0x1e5be0 */
		.fill   0x90

end_time:
		.long	0x0

OldInt2:	/* 0x1E5CA4 */
		.long	0x0
data_1e5ca8:
		.long	0x0
/* SoundBankSizes sound_bank_size_info[9];
 */
GLOBAL (sound_bank_size_info)
sound_bank_size_info_Bnk0Fld0:
		.long	0x0
sound_bank_size_info_Bnk0Fld1:
		.long	0x0
sound_bank_size_info_Bnk1Fld0:
		.long	0x0
sound_bank_size_info_Bnk1Fld1:
		.long	0x0
sound_bank_size_info_Bnk2Fld0:
		.long	0x0
sound_bank_size_info_Bnk2Fld1:
		.long	0x0
sound_bank_size_info_Bnk3Fld0:
		.long	0x0
sound_bank_size_info_Bnk3Fld1:
		.long	0x0
sound_bank_size_info_Bnk4Fld0:
		.long	0x0
sound_bank_size_info_Bnk4Fld1:
		.long	0x0
sound_bank_size_info_Bnk5Fld0:
		.long	0x0
sound_bank_size_info_Bnk5Fld1:
		.long	0x0
sound_bank_size_info_Bnk6Fld0:
		.long	0x0
sound_bank_size_info_Bnk6Fld1:
		.long	0x0
sound_bank_size_info_Bnk7Fld0:
		.long	0x0
sound_bank_size_info_Bnk7Fld1:
		.long	0x0
sound_bank_size_info_Bnk8Fld0:
		.long	0x0
sound_bank_size_info_Bnk8Fld1:
		.long	0x0
/* long largest_dat_size;
 */
GLOBAL (largest_dat_size)
		.long	0x0
/* long largest_tab_size;
 */
GLOBAL (largest_tab_size)
		.long	0x0
GLOBAL (full_sound_data_path)
		.fill   0xe0
/* MusicBankSizes music_bank_size_info;
 */
GLOBAL (music_bank_size_info)
music_bank_size_info__mbs0:
		.long	0x0
music_bank_size_info__mbs1:
		.long	0x0
music_bank_size_info__mbs2:
		.long	0x0
music_bank_size_info__mbs3:
		.long	0x0
music_bank_size_info__mbs4:
		.long	0x0
music_bank_size_info__mbs5:
		.long	0x0
music_bank_size_info__mbs6:
		.long	0x0
music_bank_size_info__mbs7:
		.long	0x0
GLOBAL (full_music_data_path)
		.fill   0x90

GLOBAL (DebugAudio)	/* 0x1E86E0 */
		.long	0x0

GLOBAL (SoundProgressMessage)	/* 0x1E86E4 */
		.fill   0x100
/* struct SampleInfo sample_id[32] */
GLOBAL (sample_id)
		.fill   0x320
GLOBAL (end_sample_id)
		.long	0x0
GLOBAL (SoundInstalled)
		.byte	0x0
GLOBAL (DisableLoadSounds)
		.byte	0x0
GLOBAL (NumberOfSamples)
		.short  0x0
GLOBAL (Sfx)
		.long	0x0
GLOBAL (EndSfxs)
		.long	0x0
GLOBAL (SfxData)
		.long	0x0
GLOBAL (SoundType)
		.short  0x0
		.fill   0x2
GLOBAL (SoundDriver)
		.long	0x0
GLOBAL (AILStartupAlreadyInitiated)
		.byte   0x0
		.fill   0x3
GLOBAL (SampleRate)
		.long	0x0
GLOBAL (ive_got_an_sb16)
		.byte   0x0
		.fill   0x1
GLOBAL (Selected95WaveDevice)
		.short  0x0
SB16_io:
		.long	0x0
GLOBAL (UseMultiMediaExtensions)
		.byte   0x0
		.fill   0x3
GLOBAL (SoundInstallChoice)
SoundInstallChoice__Field0:
		.fill   0x80
SoundInstallChoice__Field1:
		.fill   0x80
SoundInstallChoice__Field2:
		.fill   0x18
GLOBAL (music_allocated)	/* 0x1E8C4C */
		.long	0x0
GLOBAL (UseCurrentAwe32Soundfont)
		.byte	0x0
GLOBAL (MusicInstalled)
		.byte	0x0
		.fill   0x2
GLOBAL (MusicType)
		.fill   0x6
GLOBAL (CurrentTempo)
		.short  0x0
GLOBAL (SongCurrentlyPlaying)
		.short  0x0
GLOBAL (NumberOfSongs)				/* 0x1E8C5E */
		.short  0x0
GLOBAL (BfMusic)
		.long	0x0
GLOBAL (BfEndMusic)
		.long	0x0
GLOBAL (BfMusicData)
		.long	0x0

GLOBAL (MusicDriver)		/* 0x1E8C6C */
		.long	0x0
GLOBAL (SongHandle)
		.long	0x0
GLOBAL (DangerMusicFadeHandle)
		.long	0x0
GLOBAL (Awe32SoundfontLoaded)
		.byte	0x0
GLOBAL (DisableLoadMusic)	/* 0x1E8C79 */
		.byte	0x0
ive_got_an_awe32:
		.byte	0x0
GLOBAL (DisableDangerMusic)
		.byte	0x0
GLOBAL (DangerMusicVolume)
		.byte	0x0
GLOBAL (DangerMusicFadeActive)
		.byte	0x0
GLOBAL (DangerMusicAble)			/* 0x1E8C7E */
		.fill   0x6

GLOBAL (MusicInstallChoice)	/* 0x1E8C84 */
		.fill   0x80
MusicInstallChoice_str2:	/* 0x1e8d04 */
		.fill   0x98

GLOBAL (DangerMusicFadeRelease)	/* 0x1e5eac */
		.byte	0x0
		.align	4

GLOBAL (DangerMusicVoiceMessages)	/* 0x1e5edc */
		.fill   0x10

/* sound_timer_inf sound_timer[];
 */
GLOBAL (sound_timer)	/* 0x1E8D9C */
		.long	0x0
data_1e8da0: /* 0x1e8da0 */
		.fill   0x15
data_1e8db5:
		.ascii  "\x00\x00\x00"
data_1e8db8:
		.fill   0x90

GLOBAL (StreamedSoundAble)	/* 0x1E8E48 */
		.byte	0x0
GLOBAL (CDSpeed)	/* 0x1E8E49 */
		.ascii  "\x00\x00\x00"
GLOBAL (sample_handle)	/* 0x1E8E4C */
		.long	0x0
sample_directory:
		.fill   0x100
sample_sign:	/* 0x1E8F50 */
		.long	0x0
sample_format:	/* 0x1E8F54 */
		.long	0x0
sample_rate:	/* 0x1E8F58 */
		.long	0x0
loop_count:	/* 0x1E8F5C */
		.long	0x0
GLOBAL (ssnd_buffer)
		.long	0x0
		.long	0x0
temp_buffer:
		.long	0x0
GLOBAL (adpcm_source_buffer)
		.long	0x0
GLOBAL (adpcm_file_open)
		.long	0x0
adpcm_source_size:
		.long	0x0
adpcm_dest_size:
		.long	0x0
stream_flags:	/* 0x1E8F7C */
		.long	0x0
block_count:	/* 0x1E8F80 */
		.long	0x0
position_offset:	/* 0x1E8F84 */
		.long	0x0
pan_position:	/* 0x1E8F88 */
		.long	0x0
pan_rate:	/* 0x1E8F8C */
		.long	0x0
pan_target:	/* 0x1E8F90 */
		.long	0x0
GLOBAL (mixer_buffer) /* 0x1e8f94 */
		.long	0x0
GLOBAL (mixed_file_open)
		.byte	0x0
		.fill   0x7

/* long sample_fade_handle;
 */
GLOBAL (sample_fade_handle)	/* 0x1E9568 */
		.long	0x0
/* unsigned char volatile switch_off_sample_fade_timer;
 */
GLOBAL (switch_off_sample_fade_timer)
		.byte	0x0
GLOBAL (a_sample_is_fading)	/* 0x1E956D */
		.byte	0x0
/* unsigned char volatile samples_currently_fading
 */
GLOBAL (samples_currently_fading)	/* 0x2057DE */
		.byte	0x0
		.byte	0x0
/* unsigned long volatile EXPORT_SYMBOL(current_sample_queue_count);
 */
GLOBAL (current_sample_queue_count)	/* 0x2057E0 */
		.long	0x0
/* unsigned char sample_queue_handle_initiated
 */
GLOBAL (sample_queue_handle_initiated)
		.long	0x0
/* SNDSAMPLE *sample_queue_handle
 */
GLOBAL (sample_queue_handle)
		.long	0x0

GLOBAL (sbkHandle)	/* 0x1ED5F0 */
		.long	0x0

/* unsigned char *awe_buffer;
 */
GLOBAL (awe_buffer)
		.long	0x0
GLOBAL (awe_buffer_sel)
		.short	0x0
		.align	4
/* unsigned char *awe_preset;
 */
GLOBAL (awe_preset) /* 0x1ED5FC */
		.long	0x0
GLOBAL (awe_preset_sel)
		.short	0x0
		.align	4
/* struct SF_DATA *awe_data;
 */
GLOBAL (awe_data) /* 0x1ED604 */
		.long	0x0
GLOBAL (awe_data_sel)
		.short	0x0
		.align	4


